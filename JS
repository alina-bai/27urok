   1.  JavaScript, вероятно, является одним из самых важных языков программирования.
События, в результате которых появился JavaScript, разворачивались в течение шести месяцев, 
с мая по декабрь 1995 года.
    Первая версия JScript появилась в Internet Explorer 3.0, увидевшем свет в августе 1996 года.
Первой большой переменой для JavaScript после его выпуска стала стандартизация ECMA. ECMA — ассоциация, 
созданная в 1961 году с целью стандартизации информационных и коммуникационных систем.
Работа над стандартизацией JavaScript началась в ноябре 1996 года. Стандарту, над которым работала группа TC-39,
 был присвоен идентификационный номер ECMA-262. К тому моменту JavaScript активно использовался на многих 
 веб-страницах. В этом пресс-релизе 1996 года указано количество в 300000 страниц, использующих JavaScript.
 Стандартизация стала для молодого языка не только важным шагом, но и серьезным вызовом. Она открыла 
 JavaScript для большей аудитории и дала возможность сторонним разработчикам принимать участие в развитии языка.
Из-за проблем с торговой маркой ECMA не могла использовать JavaScript в качестве названия. После 
непродолжительных дебатов было решено, что описанный стандартом язык программирования будет назван ECMAScript. 
На сегодняшний день JavaScript это всего лишь коммерческое название ECMAScript.

            2.Как работает JS: обзор движка, механизмов времени выполнения, стека вызовов.
Популярность JavaScript растёт, его возможности используют на разных уровнях применяемых разработчиками 
стеков технологий и на множестве платформ. На JS делают фронтенд и бэкенд, пишут гибридные
 и встраиваемые приложения, а также многое другое.
 Анализ статистики GitHub показывает, что по показателям активных репозиториев и push-запросов, 
 JavaScript находится на первом месте, да и в других категориях он показывает довольно высокие позиции.
    JavaScript — однопоточный язык программирования. Это означает, что у него один стек вызовов.
  Таким образом, в некий момент времени он может выполнять лишь какую-то одну задачу.
 верхнюю часть стека. Когда мы из функции возвращаемся, мы вытаскиваем из стека самый 
    Стек вызовов — это структура данных, которая, говоря упрощённо, записывает сведения о месте 
 в программе, где мы находимся. Если мы переходим в функцию, мы помещаем запись о ней в 
 верхний элемент и оказываемся там, откуда вызывали эту функцию. Это — всё, что умеет стек.
 Каждая запись в стеке вызовов называется стековым кадром.
 На механизме анализа стековых кадров основана информация о стеке вызовов, трассировка стека,
выдаваемая при возникновении исключения. Трассировка стека представляет собой состояние стека
 в момент исключения.
    Модель выполнения кода в однопоточном режиме облегчает жизнь разработчика. Ему не нужно принимать 
 во внимание сложные схемы взаимодействия программных механизмов, вроде возможности взаимной блокировки
 потоков, которые возникают в многопоточных окружениях.

Однако, и у исполнения кода в однопоточном режиме тоже есть определённые ограничения. Учитывая 
то, что у JavaScript имеется один стек вызовов, поговорим о том, что происходит, когда программа «тормозит».
пока в стеке вызовов имеется выполняющаяся функция, браузер не может выполнять другие задачи — он оказывается
заблокированным. Это означает, что браузер не может выводить ничего на экран, не может выполнять другой код.
Он просто останавливается. Подобные эффекты, например, несовместимы с интерактивными интерфейсами.

Однако, это — не единственная проблема. Если браузер начинает заниматься обработкой тяжёлых задач,
он может на достаточно долгое время перестать реагировать на какие-либо воздействия. Большинство
браузеров в подобной ситуации выдают ошибку, спрашивая пользователя о том, хочет ли он завершить
выполнение сценария и закрыть страницу.

Браузер и браузерный движок

Существующий мир сложно представить без браузеров. Они есть на многих устройствах: компьютеры, лэптопы, 
телефоны, игровые приставки. Если представить браузер в виде машины то браузерный движок это всё то, 
что скрыто под капотом вашего автомобиля.
Браузеры как и автомобили могут отличаться внешним видом и содержимым под капотом. Цвет, кнопочки
на панели, аудиосистема. У кого-то под капотом двигатель V8, а у кого-то там масло течёт.
Браузер объединяет периферию и предоставляет функционал позволяющий манипулировать движком, его поведением, 
предоставляет дополнительные сервисы.
Браузерный движок выполняет всю "грязную" работу: загрузка, обработка, отрисовка данных и все возможные расчёты.
то создает браузеры и движки

Разработкой собственного браузера занимается множество компаний:
 Google, Mozilla, Apple, Microsoft, Opera Software, Яндекс, Ростелеком, Vivaldi Technologies, много их…

Каждый добавляет какие-то свои "фишки", сервисы в создаваемый браузер. 
К примеру, Яндекс интегрирует свои сервисы, поиск.

С браузерными движками дела обстоят кардинально иначе. Вот список движков, их разработчиков и обладателей:
Blink: Google
Gecko: Mozilla
WebKit: Apple
EdgeHTML: Microsoft

Лицензии браузерных движков

Любой открытый код содержит в себе лицензию с описанием условий по использованию данного кода, и браузерные движки не исключение.

Если сразу и кратко: лицензии сносные, прям вот из ряда вон ничего нет. Кроме EdgeHTML который закрыт. 
Легально утащить к себе какой-то проект и закрыто разрабатывать/изменять видимо не выйдет. Лицензии призывают к взаимной открытости.
      Blink
Открытый исходный код, ответвление движка WebKit. Как и в WebKit заявлено четыре лицензии:
The 3-Clause BSD License
The 2-Clause BSD License
GNU Lesser General Public License Version 2, June 1991
GNU Lesser General Public License Version 2.1, February 1999
Самый популярный браузерный движок. Он входит в состав проекта Chromium. Именно на основе 
Chromium создают собственные браузеры.

Gecko
Открытый исходный код. Заявлена одна лицензия:
Mozilla Public License 2.0
Активно развивается компаний Mozilla и используется в собственном браузере компании — Firefox. Так же используется в браузере Tor Browser обеспечивающий анонимное пребывание в сети.
Как основа для производителей браузеров большой популярности не имеет.

WebKit
Открытый исходный код. Заявлено четыре лицензии:
The 3-Clause BSD License
The 2-Clause BSD License
GNU Lesser General Public License Version 2, June 1991
GNU Lesser General Public License Version 2.1, February 1999
Развивается компанией Apple и используется в собственном браузере компании — Safari.
 Ранее многие компании использовали в своих разработках WebKit, но после покинули проект и переключились на Blink от Google.

EdgeHTML
Закрытый исходный код. Проприетарная лицензия.
Движок используется для браузера компании Microsoft под названием Edge, который пришёл на смену 
Internet Explorer. Это их новый движок. Предыдущий Trident (MSHTML) компания прекратила развивать.


Риски
Использование стороннего движка порождает очевидные риски:
Закрытие исходного кода
Выход ключевых компаний из разработки
Смена лицензий на код
Никто не может гарантировать, что исходный код свободного браузерного движка не будет закрыт для
публичного доступа. Так же возможен выход ключевых компаний из разработки свободного движка, что
фактически является его закрытием.


Компании развивающие собственные браузеры должны понимать, что всё будет "хорошо" пока они не 
составляют угрозу/конкуренцию разработчикам оригинального браузера/браузерного движка. 
Думаю это очевидно. Компания тратит на разработку движка свои ресурсы, но вдруг появляется 
другая компания которая используя их движок захватывает рынок. Реакция, думаю, очевидна — смотрим список рисков выше.
Написание браузерного движка сложный технологический процесс.
При этом нужно понимать, что браузерный движок постоянно развивается. Постоянно обновляются 
спецификации, добавляются новые возможности, улучшаются текущие. Это живая работа. Если взять 
какой-либо движок на текущую дату и просто использовать его для своего браузера то, примерно, 
через год-два браузер на этом движке морально устареет.


Адаптация движков
Существует проблема адаптации стороннего движка под нужды собственного браузера. На адаптацию тратится 
не мало ресурсов. При этом нужно понимать, что браузерные движки часто обновляются, что создает
 систематические проблемы при интеграции в собственный браузер.

Собственный движок
Прежде всего стоит ответить на главный вопрос — зачем создавать свой браузерный движок? А точнее,
 кому не надо создавать свой движок?
Свой браузерный движок не стоит создавать если:


Нет задачи/стремления захватить рынок.
Браузер нужен лишь номинально. Сейчас это модно, делают даже школьники.
Создаваемый движок не будет отличаться от существующих: скорость, надёжность, адаптивность.
Идёт освоение бюджета.

На текущий момент нет сложности создать собственный браузер на стороннем движке. Их наплодилось 
не мало и как-то выделиться среди всей этой массы можно только созданием браузера на исключительно 
своих компонентах, на собственном движке.

Без сомнения, создание браузерного движка процесс сложный и требующий значительных ресурсов.
 Подходить к этой разработки необходимо крайне серьёзно и с чётким планом по развитию. Кроме
  того, это не тот продукт прибыль от которого можно получать на промежуточном этапе разработки.
